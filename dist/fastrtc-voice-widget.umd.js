!function(e){"function"==typeof define&&define.amd?define(e):e()}(function(){"use strict";class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.isWebRTCConnected=!1,this.isConnecting=!1,this.peerConnection=null,this.currentStream=null,this.dataChannel=null,this.audioOutputElement=null,this.shadowClickListenerAdded=!1,this.playbackStarted=!1,this.debugEnabled=!1,this.inputDevices=[],this.outputDevices=[],this.selectedInputDeviceId="",this.selectedOutputDeviceId="",this.isExpanded=!1,this.isMicMuted=!1,this.menuPosition="bottom-right",this.isDarkMode=!1}static get observedAttributes(){return["debug","menu-position","dark-mode"]}attributeChangedCallback(e,t,n){if("debug"===e)this.debugEnabled=this.hasAttribute("debug");else if("menu-position"===e){const e=this.getAttribute("menu-position");e&&["top","top-left","top-right","bottom","bottom-left","bottom-right"].includes(e)?this.menuPosition=e:this.menuPosition="bottom-right",this.render()}else"dark-mode"===e&&(this.isDarkMode=this.hasAttribute("dark-mode"),this.render())}debugLog(...e){this.debugEnabled&&console.log(...e)}connectedCallback(){try{this.apiUrl=this.getAttribute("api-url")||"",this.authToken=this.getAttribute("auth-token")||"",this.showDeviceSelection=this.hasAttribute("show-device-selection"),this.debugEnabled=this.hasAttribute("debug");const e=this.getAttribute("menu-position");e&&["top","top-left","top-right","bottom","bottom-left","bottom-right"].includes(e)?this.menuPosition=e:this.menuPosition="bottom-right",this.isDarkMode=this.hasAttribute("dark-mode"),this.hasAttribute("is-connected")&&(this.isWebRTCConnected=!0),this.render(),this.setupEventListeners()}catch(e){console.error("Error in connectedCallback:",e)}}disconnectedCallback(){this.cleanup()}async getTurnCredentials(){try{const e=await fetch(`${this.apiUrl}/webrtc/turn-credentials`,{headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error(`Failed to get TURN credentials: ${e.status}`);return await e.json()}catch(e){return console.error("Error fetching TURN credentials:",e),{iceServers:[{urls:"stun:stun.l.google.com:19302"}]}}}async enumerateDevices(){if(navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices)try{try{(await navigator.mediaDevices.getUserMedia({audio:{noiseSuppression:!0,echoCancellation:!0,autoGainControl:!0}})).getTracks().forEach(e=>e.stop()),console.log("Microphone access granted for device enumeration")}catch(e){}const t=await navigator.mediaDevices.enumerateDevices();this.inputDevices=t.filter(e=>"audioinput"===e.kind).map(e=>({deviceId:e.deviceId,label:e.label&&e.label.trim()?e.label.trim():"default"===e.deviceId?"Default Microphone":"Unknown Microphone"})),this.outputDevices=t.filter(e=>"audiooutput"===e.kind).map(e=>({deviceId:e.deviceId,label:e.label&&e.label.trim()?e.label.trim():"default"===e.deviceId?"Default Speaker":"Unknown Speaker"})),!this.selectedInputDeviceId&&this.inputDevices.length>0&&(this.selectedInputDeviceId=this.inputDevices[0].deviceId||"default"),!this.selectedOutputDeviceId&&this.outputDevices.length>0&&(this.selectedOutputDeviceId=this.outputDevices[0].deviceId||"default"),this.rebuildDeviceMenu(),this.updateDeviceMenus()}catch(t){console.error("Error enumerating devices:",t),"NotAllowedError"===t.name?(this.inputDevices=[{deviceId:"default",label:"Default Microphone"}],this.outputDevices=[{deviceId:"default",label:"Default Speaker"}]):(this.inputDevices=[{deviceId:"",label:"No microphone detected"}],this.outputDevices=[{deviceId:"",label:"No speaker detected"}]),this.rebuildDeviceMenu(),this.updateDeviceMenus()}else console.warn("MediaDevices API not available")}async setupWebRTC(){if(this.audioOutputElement)try{const t={audio:this.selectedInputDeviceId?{deviceId:{exact:this.selectedInputDeviceId},noiseSuppression:!0,echoCancellation:!0,autoGainControl:!0}:{noiseSuppression:!0,echoCancellation:!0,autoGainControl:!0}},n=await navigator.mediaDevices.getUserMedia(t);this.currentStream=n,this.peerConnection=new RTCPeerConnection(await this.getTurnCredentials()),n.getTracks().forEach(e=>{this.peerConnection.addTrack(e,n)}),this.peerConnection.addEventListener("track",e=>{"audio"===e.track.kind&&(this.audioOutputElement?this.audioOutputElement.srcObject!==e.streams[0]&&(this.playbackStarted=!1,this.audioOutputElement.srcObject=e.streams[0],this.audioOutputElement.volume=1,this.audioOutputElement.muted=!1,this.ensurePlayback()):console.error("❌ Audio element not found!"))}),this.dataChannel=this.peerConnection.createDataChannel("text"),this.dataChannel.onopen=()=>{this.isWebRTCConnected||(this.isWebRTCConnected=!0,this.isConnecting=!1,this.updateUI(),this.forceUnmuteAudio())},this.dataChannel.onclose=()=>{},this.dataChannel.onerror=e=>console.error("Data channel error:",e),this.dataChannel.onmessage=e=>{this.isWebRTCConnected||(this.isWebRTCConnected=!0,this.updateUI(),this.forceUnmuteAudio())};const i=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(i);const o=Math.random().toString(36).substring(7);this.peerConnection.onicecandidate=({candidate:e})=>{e&&fetch(`${this.apiUrl}/webrtc/offer`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({candidate:e.toJSON(),webrtc_id:o,type:"ice-candidate"})})},this.peerConnection.oniceconnectionstatechange=()=>{"connected"===this.peerConnection.iceConnectionState||"completed"===this.peerConnection.iceConnectionState?this.isWebRTCConnected||(this.isWebRTCConnected=!0,this.isConnecting=!1,this.updateUI(),this.forceUnmuteAudio()):"failed"!==this.peerConnection.iceConnectionState&&"disconnected"!==this.peerConnection.iceConnectionState||(this.isWebRTCConnected=!1,this.isConnecting=!1,this.updateUI())},this.peerConnection.onconnectionstatechange=()=>{"connected"===this.peerConnection.connectionState?(this.isWebRTCConnected=!0,this.isConnecting=!1,this.updateUI(),this.forceUnmuteAudio()):"connecting"===this.peerConnection.connectionState||"new"===this.peerConnection.connectionState||("failed"===this.peerConnection.connectionState?(this.isWebRTCConnected=!1,this.isConnecting=!1,this.updateUI()):"disconnected"!==this.peerConnection.connectionState&&"closed"!==this.peerConnection.connectionState||(this.isWebRTCConnected=!1,this.isConnecting=!1,this.updateUI()))};const s=await fetch(`${this.apiUrl}/webrtc/offer`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sdp:i.sdp,type:i.type,webrtc_id:o})});let c;try{if(c=await s.json(),!c||"object"!=typeof c)throw new Error("Invalid server response: not an object");if(!c.sdp||!c.type)throw new Error("Invalid server response: missing sdp or type");const e=new RTCSessionDescription({type:c.type,sdp:c.sdp});await this.peerConnection.setRemoteDescription(e)}catch(e){throw console.error("Error parsing server response:",e),console.error("Server response was:",c),new Error(`Failed to parse server response: ${e.message}`)}}catch(t){console.error("Error in WebRTC setup process:",t),"NotAllowedError"===t.name?alert("Microphone access denied. Please allow microphone access in your browser settings."):"NotFoundError"===t.name?alert("No microphone found. Please connect a microphone and try again."):"NotReadableError"===t.name?alert("Microphone is in use by another application. Please close other apps using the microphone."):t.message.includes("Failed to parse SessionDescription")?(alert("WebRTC connection failed: Invalid server response. Please check your WebRTC backend."),console.error("Server response was:",serverResponse)):alert("WebRTC connection failed: "+t.message),this.isWebRTCConnected=!1,this.updateUI()}else console.error("Audio output element not found")}async shutdownWebRTC(){if(console.log("Shutting down WebRTC connection..."),this.peerConnection){this.peerConnection.getSenders().forEach(e=>{e.track&&(console.log(`Stopping track: ${e.track.kind}`),e.track.stop())}),this.peerConnection.close(),this.peerConnection=null}this.currentStream&&(this.currentStream.getTracks().forEach(e=>{e.stop()}),this.currentStream=null),console.log("WebRTC connection closed and microphone access released."),this.isWebRTCConnected=!1,this.updateUI()}async handleToggleVoiceChat(){if(this.isWebRTCConnected)await this.shutdownWebRTC();else{if(this.isConnecting)return void console.log("Connection attempt already in progress.");this.isConnecting=!0,this.updateUI(),console.log("Attempting to start voice chat setup...");try{await this.setupWebRTC()}catch(e){console.error("Error during setupWebRTC:",e),this.isConnecting=!1,this.updateUI()}}}async handleInputDeviceChange(e){if(!e||""===e)return void console.warn("Invalid input device ID:",e);const t=this.inputDevices.find(t=>(t.deviceId||"default")===e);if(console.log("Selected input device info:",t||{deviceId:e,note:"Not found in inputDevices"}),this.selectedInputDeviceId=e,this.updateDeviceMenus(),this.isWebRTCConnected&&this.peerConnection&&this.currentStream)try{console.log(`Switching input device to: ${e}`);const t={audio:e&&"default"!==e?{deviceId:{exact:e},noiseSuppression:!0,echoCancellation:!0,autoGainControl:!0}:{noiseSuppression:!0,echoCancellation:!0,autoGainControl:!0}},n=await navigator.mediaDevices.getUserMedia(t);console.log("New microphone stream obtained."),this.currentStream.getTracks().forEach(e=>{e.stop()});const i=this.peerConnection.getSenders().find(e=>e.track&&"audio"===e.track.kind);i&&n.getAudioTracks().length>0?(await i.replaceTrack(n.getAudioTracks()[0]),console.log("Audio track replaced successfully.")):console.error("Could not find audio sender or new audio track."),this.currentStream=n}catch(n){console.error("Error changing input device during connection:",n);const e=this.selectedInputDeviceId;this.selectedInputDeviceId=e,this.updateDeviceMenus()}}async handleOutputDeviceChange(e){if(!e||""===e)return void console.warn("Invalid output device ID:",e);const t=this.outputDevices.find(t=>(t.deviceId||"default")===e);if(console.log("Selected output device info:",t||{deviceId:e,note:"Not found in outputDevices"}),this.selectedOutputDeviceId=e,this.updateDeviceMenus(),this.audioOutputElement&&this.audioOutputElement.setSinkId)try{"default"!==e?(await this.audioOutputElement.setSinkId(e),console.log(`Audio output device changed to: ${e}`)):console.log("Using default audio output device")}catch(n){console.error("Error setting audio output device:",n)}else console.warn("Audio output device change not supported in this browser")}async handleMuteToggle(){if(this.isWebRTCConnected&&this.peerConnection&&this.currentStream)try{const e=this.currentStream.getAudioTracks();if(0===e.length)return void console.warn("No audio tracks found in current stream");this.isMicMuted=!this.isMicMuted,e.forEach(e=>{e.enabled=!this.isMicMuted}),console.log("Microphone "+(this.isMicMuted?"muted":"unmuted"));this.peerConnection.getSenders().find(e=>e.track&&"audio"===e.track.kind)&&console.log("Audio sender found, mute state updated"),this.updateUI()}catch(e){console.error("Error toggling mute:",e),this.isMicMuted=!this.isMicMuted,this.updateUI()}else console.warn("Cannot toggle mute - not connected or no stream")}render(){const e=document.createElement("div");e.className="widget-container";const t=document.createElement("style");t.textContent=`\n      .widget-container {\n        display: inline-flex;\n        align-items: center;\n        gap: 12px;\n        ${this.isDarkMode?"\n          background: #1f2937;\n          border: 1px solid #374151;\n        ":"\n          background: #ffffff;\n          border: 1px solid #e5e7eb;\n        "}\n        border-radius: 24px;\n        padding: 8px 16px 8px 12px;\n        ${this.isDarkMode?"\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\n        ":"\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n        "}\n        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n        box-sizing: border-box;\n        position: relative;\n        transition: all 0.2s ease;\n        max-width: 320px;\n        min-width: 200px;\n      }\n\n      .widget-container:hover {\n        ${this.isDarkMode?"\n          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);\n        ":"\n          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        "}\n      }\n\n      .widget-buttons {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .mic-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        ${this.isDarkMode?"\n          background: #1f2937;\n          border: 2px solid #374151;\n        ":"\n          background: #ffffff;\n          border: 2px solid #e5e7eb;\n        "}\n        cursor: pointer;\n        transition: all 0.2s ease;\n        outline: none;\n        flex-shrink: 0;\n      }\n\n      .mic-button.active {\n        ${this.isDarkMode?"\n          background: #dc2626;\n          border-color: #b91c1c;\n        ":"\n          background: #ef4444;\n          border-color: #dc2626;\n        "}\n        color: #ffffff;\n      }\n\n      .mic-button.connecting {\n        ${this.isDarkMode?"\n          background: #d97706;\n          border-color: #b45309;\n        ":"\n          background: #f59e0b;\n          border-color: #d97706;\n        "}\n        color: #ffffff;\n      }\n\n      .mic-button.muted {\n        background: #fbbf24;\n        ${this.isDarkMode?"\n          border-color: #d97706;\n        ":"\n          border-color: #f59e0b;\n        "}\n        ${this.isDarkMode,"\n          color: #111827 !important;\n        "}\n      }\n\n      .mic-button.muted svg, .mic-button.muted svg * {\n        ${this.isDarkMode,"\n          stroke: #111827 !important;\n        "}\n      }\n\n      /* Call button (idle state) - plain/neutral */\n      .mic-button:not(.active):not(.connecting):not(.muted) {\n        ${this.isDarkMode?"\n          background: #1f2937;\n          border-color: #374151;\n          color: #f9fafb;\n        ":"\n          background: #ffffff;\n          border-color: #e5e7eb;\n          color: #374151;\n        "}\n      }\n\n      .mic-button:not(.active):not(.connecting):not(.muted) svg {\n        ${this.isDarkMode?"\n          color: #f9fafb;\n        ":"\n          color: #374151;\n        "}\n      }\n\n      .mic-button:hover {\n        transform: scale(1.05);\n      }\n\n      .mic-button:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none;\n      }\n\n      .text-container {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 2px;\n        min-width: 0;\n      }\n\n      .primary-text {\n        font-size: 13px;\n        font-weight: 500;\n        ${this.isDarkMode?"\n          color: #f9fafb;\n        ":"\n          color: #111827;\n        "}\n        margin: 0;\n        line-height: 1.2;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .secondary-text {\n        font-size: 11px;\n        ${this.isDarkMode?"\n          color: #d1d5db;\n        ":"\n          color: #6b7280;\n        "}\n        margin: 0;\n        line-height: 1.2;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .menu-container {\n        position: absolute;\n        top: 50%;\n        right: 8px;\n        transform: translateY(-50%);\n        z-index: 10;\n      }\n\n      .settings-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        ${this.isDarkMode?"\n          background: #111827;\n          color: #f9fafb;\n        ":"\n          background: #f3f4f6;\n          color: #374151;\n        "}\n        border: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        outline: none;\n      }\n\n      .settings-button:hover {\n        ${this.isDarkMode?"\n          background: #374151;\n          color: #f9fafb;\n        ":"\n          background: #e5e7eb;\n          color: #374151;\n        "}\n      }\n\n      .settings-button svg {\n        ${this.isDarkMode?"\n          color: #f9fafb;\n        ":"\n          color: #374151;\n        "}\n      }\n\n      .device-menu {\n        position: absolute;\n        ${this.isDarkMode?"\n          background: #1f2937;\n          border: 1px solid #374151;\n        ":"\n          background: white;\n          border: 1px solid #e5e7eb;\n        "}\n        border-radius: 8px;\n        ${this.isDarkMode?"\n          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);\n        ":"\n          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        "}\n        min-width: 200px;\n        z-index: 1000;\n        display: none;\n      }\n\n      /* Device menu positioning */\n      .device-menu[data-position="top"] {\n        bottom: calc(100% + 4px);\n        right: 0;\n        transform: none;\n      }\n\n      .device-menu[data-position="top-left"] {\n        bottom: calc(100% + 4px);\n        right: 0;\n        transform: none;\n      }\n\n      .device-menu[data-position="top-right"] {\n        bottom: calc(100% + 4px);\n        left: 0;\n        transform: none;\n      }\n\n      .device-menu[data-position="bottom"] {\n        top: calc(100% + 4px);\n        right: 0;\n        transform: none;\n      }\n\n      .device-menu[data-position="bottom-left"] {\n        top: calc(100% + 4px);\n        right: 0;\n        transform: none;\n      }\n\n      .device-menu[data-position="bottom-right"] {\n        top: calc(100% + 4px);\n        left: 0;\n        transform: none;\n      }\n\n      .device-menu.open {\n        display: block;\n      }\n\n      .device-menu-section {\n        padding: 8px;\n      }\n\n      .device-menu-label {\n        font-size: 9px;\n        font-weight: 500;\n        ${this.isDarkMode,"\n          color: #9ca3af;\n        "}\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n        padding: 0 8px 4px;\n      }\n\n      .device-option {\n        display: flex;\n        align-items: center;\n        padding: 8px;\n        cursor: pointer;\n        border-radius: 4px;\n        transition: background-color 0.15s ease;\n      }\n\n      .device-option:hover {\n        ${this.isDarkMode?"\n          background-color: #374151;\n        ":"\n          background-color: #f3f4f6;\n        "}\n      }\n\n      .device-option.selected {\n        ${this.isDarkMode?"\n          background-color: #3b82f6;\n        ":"\n          background-color: #eff6ff;\n        "}\n        color: #ffffff;\n      }\n\n      .device-option.selected label {\n        color: #ffffff;\n        font-weight: 500;\n      }\n\n      .device-option input[type="radio"] {\n        margin-right: 8px;\n      }\n\n      .device-option label {\n        flex: 1;\n        cursor: pointer;\n        font-size: 11px;\n        ${this.isDarkMode?"\n          color: #d1d5db;\n        ":"\n          color: #6b7280;\n        "}\n      }\n\n      .audio-element {\n        position: absolute;\n        visibility: hidden;\n        width: 1px;\n        height: 1px;\n        pointer-events: none;\n        opacity: 0;\n      }\n\n      .audio-element[autoplay] {\n        /* Ensure autoplay works */\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      @keyframes pulse {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.5; }\n      }\n\n      .connecting-animation {\n        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n      }\n\n      .sr-only {\n        position: absolute;\n        width: 1px;\n        height: 1px;\n        padding: 0;\n        margin: -1px;\n        overflow: hidden;\n        clip: rect(0, 0, 0, 0);\n        white-space: nowrap;\n        border: 0;\n      }\n    `;const n=document.createElement("button");n.className=`mic-button ${this.isWebRTCConnected?"active":""} ${this.isConnecting?"connecting":""}`,n.setAttribute("aria-label",this.isWebRTCConnected?"Stop voice chat":"Start voice chat"),n.setAttribute("data-role","call"),this.isConnecting&&!this.isWebRTCConnected&&n.classList.add("connecting-animation");const i=document.createElement("span");i.className="sr-only",i.textContent=this.isWebRTCConnected?"Stop Voice Chat":"Start Voice Chat";n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-phone-icon lucide-phone"><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"/></svg>',n.appendChild(i);const o=document.createElement("div");o.className="text-container";const s=document.createElement("p");s.className="primary-text",s.textContent=this.isConnecting&&!this.isWebRTCConnected?"Connecting...":this.isWebRTCConnected?"Connected":"Click to start!";const c=document.createElement("p");c.className="secondary-text",c.textContent="Click to disconnect",this.isWebRTCConnected||(c.style.display="none"),o.appendChild(s),o.appendChild(c);let a=null;if(this.showDeviceSelection){a=document.createElement("div"),a.className="menu-container";const e=document.createElement("button");e.className="settings-button",e.setAttribute("aria-label","Device settings"),e.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-settings-icon lucide-settings"><path d="M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915"/><circle cx="12" cy="12" r="3"/></svg>';const t=document.createElement("div");t.className="device-menu",t.setAttribute("data-position",this.menuPosition),this.buildDeviceMenuContent(t),e.addEventListener("click",async e=>{e.stopPropagation(),0===this.inputDevices.length&&0===this.outputDevices.length&&(console.log("Settings button clicked - enumerating devices..."),await this.enumerateDevices()),t.classList.toggle("open")}),document.addEventListener("click",e=>{a.contains(e.target)||t.classList.remove("open")}),a.appendChild(e),a.appendChild(t)}if(this.isWebRTCConnected){const t=document.createElement("div");t.className="widget-buttons";const n=document.createElement("button");n.className="mic-button active",n.setAttribute("aria-label","Hang up"),n.setAttribute("data-role","hangup"),n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-phone-off-icon lucide-phone-off"><path d="M10.1 13.9a14 14 0 0 0 3.732 2.668 1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 18 18 0 0 1-12.728-5.272"/><path d="M22 2 2 22"/><path d="M4.76 13.582A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 .244.473"/></svg>';const i=document.createElement("button");i.className="mic-button "+(this.isMicMuted?"muted":""),i.setAttribute("aria-label",this.isMicMuted?"Unmute microphone":"Mute microphone"),i.setAttribute("data-role","mute"),i.innerHTML=this.isMicMuted?'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic-off-icon lucide-mic-off"><path d="M12 19v3"/><path d="M15 9.34V5a3 3 0 0 0-5.68-1.33"/><path d="M16.95 16.95A7 7 0 0 1 5 12v-2"/><path d="M18.89 13.23A7 7 0 0 0 19 12v-2"/><path d="m2 2 20 20"/><path d="M9 9v3a3 3 0 0 0 5.12 2.12"/></svg>':'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic-icon lucide-mic"><path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v1a7 7 0 0 1-14 0v-1"/><path d="M12 19v3"/><path d="M8 22h8"/></svg>',t.appendChild(n),t.appendChild(i),e.appendChild(t)}else e.appendChild(n);e.appendChild(o),a&&(e.style.position="relative",e.appendChild(a));const d=this.audioOutputElement,r=(null==d?void 0:d.srcObject)||null;d?this.audioOutputElement=d:(this.audioOutputElement=document.createElement("audio"),this.audioOutputElement.className="audio-element",this.audioOutputElement.id="fastrtc-voice-widget-audio",this.audioOutputElement.autoplay=!0,this.audioOutputElement.playsInline=!0,this.audioOutputElement.controls=!1,this.audioOutputElement.muted=!1,this.audioOutputElement.volume=1,this.audioOutputElement.addEventListener("error",e=>{console.error("Audio element error:",e)})),this.shadowClickListenerAdded||(this.shadowRoot.addEventListener("click",()=>{this.audioOutputElement&&(this.audioOutputElement.muted&&(console.log("🔊 User clicked widget - attempting to unmute audio"),this.forceUnmuteAudio()),this.ensurePlayback())}),this.shadowClickListenerAdded=!0),e.appendChild(this.audioOutputElement),r&&!this.audioOutputElement.srcObject&&(this.audioOutputElement.srcObject=r),this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(t),this.shadowRoot.appendChild(e)}updateUI(){this.render(),this.setupEventListeners()}updateDeviceMenus(){const e=this.shadowRoot.querySelector(".device-menu");if(e){const t=e.querySelectorAll('input[name="input-device"]'),n=e.querySelectorAll('input[name="output-device"]');t.forEach(e=>{e.checked=e.value===this.selectedInputDeviceId;e.closest(".device-option").classList.toggle("selected",e.checked)}),n.forEach(e=>{e.checked=e.value===this.selectedOutputDeviceId;e.closest(".device-option").classList.toggle("selected",e.checked)})}}buildDeviceMenuContent(e){if(!e)return;e.innerHTML="";const t=document.createElement("div");t.className="device-menu-section";const n=document.createElement("div");n.className="device-menu-label",n.textContent="Input Device",t.appendChild(n),this.inputDevices.forEach(n=>{const i=document.createElement("div");i.className="device-option "+(n.deviceId===this.selectedInputDeviceId?"selected":"");const o=document.createElement("input");o.type="radio",o.name="input-device",o.value=n.deviceId||"default",o.checked=n.deviceId===this.selectedInputDeviceId;const s=document.createElement("label");s.textContent=n.label,i.appendChild(o),i.appendChild(s),i.addEventListener("click",()=>{this.handleInputDeviceChange(n.deviceId||"default"),e.classList.remove("open")}),t.appendChild(i)});const i=document.createElement("div");i.className="device-menu-section";const o=document.createElement("div");o.className="device-menu-label",o.textContent="Output Device",i.appendChild(o),this.outputDevices.forEach(t=>{const n=document.createElement("div");n.className="device-option "+(t.deviceId===this.selectedOutputDeviceId?"selected":"");const o=document.createElement("input");o.type="radio",o.name="output-device",o.value=t.deviceId||"default",o.checked=t.deviceId===this.selectedOutputDeviceId;const s=document.createElement("label");s.textContent=t.label,n.appendChild(o),n.appendChild(s),n.addEventListener("click",()=>{this.handleOutputDeviceChange(t.deviceId||"default"),e.classList.remove("open")}),i.appendChild(n)}),e.appendChild(t),e.appendChild(i)}rebuildDeviceMenu(){const e=this.shadowRoot&&this.shadowRoot.querySelector(".device-menu");e&&this.buildDeviceMenuContent(e)}setupEventListeners(){const e=this.shadowRoot.querySelector('.mic-button[data-role="call"]');e&&e.addEventListener("click",()=>this.handleToggleVoiceChat());const t=this.shadowRoot.querySelector('.mic-button[data-role="hangup"]');t&&!t.hasEventListener&&(t.addEventListener("click",()=>this.handleToggleVoiceChat()),t.hasEventListener=!0);const n=this.shadowRoot.querySelector('.mic-button[data-role="mute"]');n&&!n.hasEventListener&&(n.addEventListener("click",()=>{this.handleMuteToggle();const e=this.isMicMuted;n.classList.toggle("muted",e),n.setAttribute("aria-label",e?"Unmute microphone":"Mute microphone"),n.innerHTML=e?'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic-off-icon lucide-mic-off"><path d="M12 19v3"/><path d="M15 9.34V5a3 3 0 0 0-5.68-1.33"/><path d="M16.95 16.95A7 7 0 0 1 5 12v-2"/><path d="M18.89 13.23A7 7 0 0 0 19 12v-2"/><path d="m2 2 20 20"/><path d="M9 9v3a3 3 0 0 0 5.12 2.12"/></svg>':'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mic-icon lucide-mic"><path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v1a7 7 0 0 1-14 0v-1"/><path d="M12 19v3"/><path d="M8 22h8"/></svg>'}),n.hasEventListener=!0)}cleanup(){this.shutdownWebRTC(),this.audioOutputElement&&(console.log("Cleaning up audio element"),this.audioOutputElement.srcObject=null,this.audioOutputElement.pause()),this.playbackStarted=!1}forceUnmuteAudio(){this.audioOutputElement?(this.audioOutputElement.muted=!1,this.audioOutputElement.volume=1,this.audioOutputElement.setSinkId&&this.selectedOutputDeviceId&&this.audioOutputElement.setSinkId(this.selectedOutputDeviceId).catch(()=>{}),this.ensurePlayback()):console.error("Audio element not found")}ensurePlayback(){if(this.audioOutputElement&&!0!==this.playbackStarted&&this.audioOutputElement.srcObject)if(this.audioOutputElement.paused){const e=this.audioOutputElement.play();void 0!==e&&e.then(()=>{this.playbackStarted=!0}).catch(e=>{})}else this.playbackStarted=!0}debugAudioStatus(){var e,t,n,i,o,s,c,a,d;if(console.group("🔊 Audio Status Debug"),console.log("Audio element exists:",!!this.audioOutputElement),console.log("Audio element muted:",null==(e=this.audioOutputElement)?void 0:e.muted),console.log("Audio element volume:",null==(t=this.audioOutputElement)?void 0:t.volume),console.log("Audio element srcObject:",null==(n=this.audioOutputElement)?void 0:n.srcObject),console.log("Audio element paused:",null==(i=this.audioOutputElement)?void 0:i.paused),console.log("Audio element readyState:",null==(o=this.audioOutputElement)?void 0:o.readyState),console.log("WebRTC connected:",this.isWebRTCConnected),console.log("Peer connection state:",null==(s=this.peerConnection)?void 0:s.connectionState),console.log("Current stream tracks:",(null==(c=this.currentStream)?void 0:c.getTracks().length)||0),console.log("Peer connection senders:",(null==(a=this.peerConnection)?void 0:a.getSenders().length)||0),this.peerConnection){const e=this.peerConnection.getReceivers();console.log("Peer connection receivers:",e.length),e.forEach((e,t)=>{console.log(`Receiver ${t}:`,{track:e.track?{kind:e.track.kind,id:e.track.id,enabled:e.track.enabled,readyState:e.track.readyState}:null})})}if(null==(d=this.audioOutputElement)?void 0:d.srcObject){const e=this.audioOutputElement.srcObject;console.log("Audio stream details:",{id:e.id,active:e.active,tracks:e.getTracks().map(e=>({kind:e.kind,id:e.id,enabled:e.enabled,readyState:e.readyState}))})}console.groupEnd()}}customElements.get("fastrtc-voice-widget")||customElements.define("fastrtc-voice-widget",e),window.FastRTCVoiceWidget=e});
//# sourceMappingURL=fastrtc-voice-widget.umd.js.map
